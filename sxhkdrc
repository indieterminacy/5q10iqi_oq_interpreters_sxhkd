# make clean debug
# sxhkd -c ~/foorc
#git://anongit.freedesktop.org/xorg/util/macros vim: set foldmarker={{,}}
#foldlevel=0 foldmethod=marker nospell:
#
# bspwm hotkeys
#
#
#NEW
#
ctrl + alt + v; ctrl + alt + v
    ~/3q50vqv_window-managers/oq_bspwm/vqv_windows.zsh q
ctrl + alt + V; ctrl + alt + V
    ~/3q50vqv_window-managers/oq_bspwm/vqv_windows.zsh w

alt + {q,w}
    bspc monitor -f {L,R}

alt + shift + {q,w}
    bspc node --to-monitor {L,R}

alt + `
    bspc node --to monitor prev

# TODO Modernise
# super + ctrl + {1-9}
# 	bspc window -r 0.{1-9}

# TODO Modernise
# super + {_,shift + }{1-9,0}
# 	bspc {desktop -f,window -d} ^{1-9,10}
#
super + {_,ctrl} + d
    ~/5q30vqv_window-managers/oq_bspwm/je_configuring/bspwm-config/bin/bspwm_{_,re}name_desktop

super + alt + d
    bspc desktop focused -r

alt + shift + v
    rofi -show window -modi window \
    width 200
#
#
# 10 Activity
## dqd Alter
### twt Add Text
super + BackSpace
# TODO Expand on usage
    xvkbd -xsendevent -text 'Delete'

## 20 Content
### twt Record
# TODO Remember how this works
super + {o,i}
	bspc wm -h off; \
	bspc node {older,newer} -f; \
	bspc wm -h on
	# bspc control --record-history off; \
	# bspc window {older,newer} -f; \
	# bspc control --record-history on

### twt Scratchpad
# TODO Build alternatives
ctrl + alt + s
    xdotool search --onlyvisible --classname scratchpad windowunmap \
    || xdotool search --classname scratchpad windowmap \
    || st -c scratchpad -g 1000x400+460 &

### 10r Create Screenshot
Print
# TODO Turn into function
# TODO Build calling function
    scrot -q 100 $HOME/2q50twt_screenshots/fw_images/twt_screenshot_$(date +%s).jpg

# TODO Find missing file
# ctrl + Print
    # ~/2q_doc-qiuy/50_Environment/iqi_screenshots/oq_bash/oqo_modules/oq_iqi_screenshot.sh

## 60 System
### ue Load Program
# 40 Movement
# bqb_transferring
### cqc Browsers
## ue Load Qutebrowser
## ue Load Firefox
# TODO Clean up Qutebrowser
# TODO Clean up Qutebrowser pathway
ctrl + alt + {o,p}
    {~/6q_tools-qiuy/50_Environment/bqb_browsers/oq_qutebrowser/qutebrowser/qutebrowser/qutebrowser.py,firefox}

## yq_oq_orientate_application
# TODO Check if functional
# TODO Alter k mapping
super + {k,p}
# TODO Clean up Qutebrowser
# TODO clarify which Qutebrowser pathway
    hq_oq_navigate_application {~/6q_tools-qiuy/50_Environment/bqb_browsers/oq_qutebrowser/qutebrowser/qutebrowser/qutebrowser.py,firefox}

## hq Navigate to Firefox
# super + {h,j}
#     xdotool search --class {~/6q_tools-qiuy/50_Environment/bqb_browsers/oq_qutebrowser/qutebrowser/qutebrowser/qutebrowser.py,firefox} windowactivate

## hq oq Navigate Application
# TODO Troubleshoot
# TODO Clarify what `_` is on the keyboard
alt + {r,t,n}
# alt + _ + {r,t,n}
    hq_oq_navigate_application {urxvt,st,thunderbird}

### 60m Email Clients
#### 10r Load Thunderbird
ctrl + alt + n
    thunderbird
super + n
    xdotool search --class thunderbird windowactivate

## 60 System
### 60m System Monitoring Tools
#### 10 Activity
##### 60m Terminals
ctrl + alt {r,t}
    {urxvtcd,st}

#### hq Navigation
##### vq Menus
# TODO Build options
alt + {o,O}
	rofi -show {drun,run} -sidebar-mode -modi drun

##### cqc File Managers
# Load Ranger with Vim as Editor
ctrl + alt + f
# TODO Widen usecases
    export EDITOR=vim && urxvtcd -e ranger

#### iqi Access
##### iqi Locking Mechanisms
# TODO Investigate commands
# super + x
    # xset dpms force off; DISPLAY=:0.0 /usr/bin/slimlock

### vqv window-managers
#### oq BSPWM
# general hotkeys
## 10r Quit
super + alt + Escape
	bspc quit
   # TODO Investigate this as an alternative
   # ~/1q50iwi_terminating/oq_bash/rqr_oq_terminating_applications.sh ; bspc quit 1

## rqr updating
# iqi interpreters
### oq Sxhkd
# make sxhkd reload its configuration files:
# TODO Doublecheck whether functional
# TODO Doublecheck whether notify-send is the most appropriate notifier
ctrl + super + Escape
    pkill -USR1 -x sxhkd
    # pkill -USR1 -x sxhkd; notify-send -h int:value:42 "Sxhkd configuration reloaded"

# 60 System
## rqr oq Update Programs
ctrl + alt + {t,y,u}
    ~/1q60ue_updating/oq_bash/oe_debian/rqr_mq_iqi_update_distribution_state.sh  {update,upgrade,dist-upgrade}

### oq Launchers
# 30 Display
## 10r Close
### 30f Close Window
# Close or kill current window
alt + {_,shift + }e
	bspc node -{c,k}

###########################
# send the newest marked node to the newest preselected node
# TODO Doublecheck functionality
super + y
	bspc node newest.marked.local -n newest.!automatic.local

# hq_orientating
# swap the current node and the biggest node
super + g
	bspc node -s biggest

###########################
# focus/swap

## 10r Move Window
# move window in direction
# focus the node in the given direction
alt + {_,shift +,ctrl + }{h,j,k,l}
	bspc node -{f,s,p} {west,south,north,east}

# focus or send to the given desktop
# TODO Make functional and modernise
# super + {_,shift + }{1-9,0}
# 	bspc {desktop -f,node -d} '^{1-9,10}'

# preselect the ratio
super + ctrl + {1-9}
	bspc node -o 0.{1-9}

# cancel the preselection for the focused node
super + ctrl + space
	bspc node -p cancel

# cancel the preselection for the focused desktop
super + ctrl + shift + space
	bspc query -N -d | xargs -I id -n 1 bspc node id -p cancel


### yqy vq shrinking frame-gaps
# change window gap at run time
super + plus
    bspc config -d focused window_gap $((`bspc config -d focused window_gap` + 5 ))

# Restore original gap
super + equal
    bspc config top_padding 6; bspc config -d focused window_gap 15

# Shrink gap
super + minus
    bspc config -d focused window_gap $((`bspc config -d focused window_gap` - 5 ))

# Remove gap
# TODO Change to remove duplication
super + 0
    bspc config top_padding 14; bspc config -d focused window_gap 0

### yq_transparancy
# TODO Migrate away from gnome-terminal usage
# super + alt + {minus,plus}
#     ~/1q30yq_transparency/oq_bspwm/terminal_transparency {decrement,increment}

# TODO Alter arguments
# TODO Update syntax within script
# TODO FIX if still relevant
# super + shift + {1,2,3,4,5}
#     ~/1q50vqv_panels/oq_zsh/oe_bspwm/preset {'top-left','bottom-left','vertical-right','wide-vertical-left','small-bottom-left'}

### 10r Toggle Visibility
# Toggle visibility status bar
super + space
    ~/1q50vqv_window-managers/gq_hiding/oq_zsh/oe_bspwm/rqr_iqi_hiding_window-managers.zsh dzen2-bottom-status-bar

# Show dmenu bar (windows)
# TODO Replace Dmenu with Rofi
# TODO Establish whether still necessary
ctrl + shift + space
    ~/1q50iqi_switching/oq_bash/iqi_oq_switching_applications.sh

### 30t Hide Windows
# un/hide currently active window
# TODO Check if most modern approach
super + alt + {u,U}
    ~/1q50vqv_window-managers/oq_zsh/oe_bspwm/rqr_toggle.zsh {hide,show}

# Show Desktop & Bar
# Identify whether command is outdated
# super + d
#     bspc control --toggle-visibility | echo "X`df -h | head -n 2 | tail -n 1 | cut -d 'G' -f 3`" > /tmp/panel-fifo

# TODO Modernise
# TODO Adapt concept to be more useful in other domains
# super + l
#     ~/1q50mq_languages/iqi_states/oq_bash/oe_bspwm/iqi_mq_switch_languages.sh

## 10r Resize
# Resize according to xdotool man example script
# TODO Check functionality
super + shift {r,t,y,u}
    ~/1q50vqv_panels/oq_bash/oe_xdotool/iqi_alter-panels.sh {urxvt 600 400,urxvtcd 600 400,firefox 600 400,thunderbird 600 400}

## 10r Resize Window
# TODO Check functionality
super + button{1-3}
	bspc pointer -g {move,resize_side,resize_corner}

# Mouse button to move and resize
# TODO Check functionality
super + shift + button{1-3}
    bspc pointer -g {move,resize_side,resize_corner}

# move a floating window
super + {Left,Down,Up,Right}
	bspc node -v {-20 0,0 20,0 -20,20 0}

# TODO Investigate usage of xdo
# source: http://crunchbang.org/forums/viewtopic.php?pid=378171#p378171
# move floating windows (requires baskerville's xdo pacacur -S xdo-git)
#     xdo resize {-w -50,-w +50,-h -50,-h +50}
#     xdo move {-x -50,-x +50,-y -50,-y +50}


## 10r Enlarge Window
### 10r Make Fullscreen
#
# state/flags
#

# set the window state
# Toggle between floating or fullscreen for a window
# TODO Clarify pseudo_tiled
super + {t,shift + t,s,f}
	bspc node -t {tiled,pseudo_tiled,floating,fullscreen}

# TODO Doublecheck functional
# TODO Check if needs updating
alt + f
    ~/1q50vqv_window-managers/gq_resizing/oq_zsh/oe_bspwm/_resize

### 10r Make Floating Terminal
# shift + f - float
# TODO Check if needs updating
alt + shift + f
    ~/1q50vqv_window-managers/oq_zsh/oe_bspwm/yqy_cqc_floating_terminals.zsh

# set the node flags
# TODO Clarify usage
super + ctrl + {m,x,y,z}
	bspc node -g {marked,locked,sticky,private}

# TODO Build reference for this
# TODO Identify whether this is duplicative given its only referencing another script
    # ~/1q50vqv_window-managers/oq_zsh/oe_bspwm/yqy_floating.zsh

###########################
## yqy shrinking
### yqy vq shrinking windows
# shrink window in direction
# TODO Check if outdated
# super + ctrl + shift + {Left,Down,Up,Right}
#     bspc window --edge {right -10,up +10,down -10,left +10}

# Decrease window width or height
# enlarge window in direction
# TODO Combine
alt + super + {h,j,k,l}
   bspc node -z {right,up,down,left} 20 0
alt + super + shift + {h,j,k,l}
   bspc node -z {left,down,up,right} -20 0
############

### 40y Navigate Music

XF86AudioMute
    amixer set Master toggle
XF86AudioLowerVolume
# super + [
    amixer -c 0 set Master 5dB-
XF86AudioRaiseVolume
# super + ]
    amixer -c 0 set Master 5dB+

# application actions

# super + bracketleft
    # pamixer --increase 5
# XF86AudioRaiseVolume
    # pamixer --increase 5
# super + bracketright
    # pamixer --decrease 5
# XF86AudioLowerVolume
    # pamixer --decrease 5
# super + backslash
    # pamixer --toggle-mute
# XF86AudioMute
    # pamixer --toggle-mute

# XF86AudioRaiseVolume
    # pulseaudio-ctl up
# XF86AudioLowerVolume
    # pulseaudio-ctl down
# XF86AudioMute
    # pulseaudio-ctl mute
# # Manage keyboard backlight
# XF86KbdBrightnessUp
    # asus-kbd-backlight up
# XF86KbdBrightnessDown
    # asus-kbd-backlight down

# TODO Investigate usage of rqr_oq_playing_ncmpcpp.sh

XF86Audio{Prev,Next}
    ~/1q20rer_playing/fe_music/oq_bash/oe_xdotool/rqr_oqo_player.sh {prev,next}

XF86AudioStop
    ~/1q20rer_playing/fe_music/oq_bash/oe_xdotool/rqr_oqo_player.sh stop

XF86AudioPlay
    ~/1q20rer_playing/fe_music/oq_bash/oe_xdotool/rqr_oqo_player.sh play

# Lock screen
super + alt + ctrl + shift + i
    i3lock

## 40u Navigation
# alternate between the tiled and monocle layout
# TODO Find new binding
super + a
	bspc desktop -l next

# 40y Switch Last Window
super + Tab
    bspc node -f last

# TODO Check functional
# super + y2
    # bspc window -w last.manual

# Move to largest node
# Includes between windows
alt + {1,2}
    bspc node -f {biggest,smallest}

## 40h Orientation

# Balance Tree
# Presets window distribution
# Check functional
# super + b
# 	bspc desktop -B

# expand a window by moving one of its side outward
# Check whether bindings are duplicate
# super + alt + {h,j,k,l}
# 	bspc node -z {left -20 0,bottom 0 20,top 0 -20,right 20 0}
	# bspc window -e {left -10,down +10,up -10,right +10}
    # bspc window -e {left,down,up,right} push

# contract a window by moving one of its side inward
# super + alt + shift + {h,j,k,l}
# 	bspc node -z {right -20 0,top 0 20,bottom 0 -20,left 20 0}
	# bspc window -e {right -10,up +10,down -10,left +10}
    # bspc window -e {left,down,up,right} pull

# 40 Movement
# Go to or move to a window to given desktop
# alt + {_,ctrl+ }{1-9,0}
#     bspc {desktop -f,window -d} ^{1-9,10}

# TODO Doublecheck if functional
# super + ctrl + {1-9}
# 	bspc window -r 0.{1-9}

# TODO Doublecheck if functional
super + {_,shift + }{1-9,0}
	bspc {desktop -f,window -d} ^{1-9,10}

# TODO Check functional
# TODO Check duplicative
# TODO Change bindings
super + KP_{End,Down,Next,Left,Begin,Right,Home,Up}
    bspc desktop -f {1,2,3,4,5,6,7,8}

# change window size and position
# Increase window width or height
# TODO Check duplicative
# alt + super + shift + {h,j,k,l}
#    bspc window -e {left,down,up,right} push

# 30g Focus
# mouse settings
# Mouse pointer raises focus on window
~button1
	bspc pointer -g focus

# TODO Check functional
# TODO Check usecase
super + @button{1-3}
	bspc pointer -u

# sticky window
# TODO Check sticky
# TODO Check uptodate
alt + s
    bspc window -t sticky

alt + {grave,Tab}
    bspc {node,desktop} -f last
    # TODO Check whether duplicative
    # bspc {window,desktop} -f last

## hq Navigation
### he Navigate Through Desktops
# Cycle through desktops
# focus the next/previous desktop in the current monitor
alt + bracket{left,right}
	bspc desktop -f {prev,next}.local

# TODO Check that occupied is still functional
alt + {_,shift +}grave
    bspc desktop -f {next,prev}.occupied

# alt + ctrl + {_,shift +}Tab
#     bspc desktop -f {next,prev}
alt + ctrl + {_,shift +}grave
    bspc desktop -f {next,prev}

# Focus other desktop
# TODO Check still functional
alt + shift + 1
    bspc monitor -f prev

# TODO Check still functional
alt + shift + 2
    bspc monitor -f next

# Focus next window
alt + {_,shift +} Tab
  bspc window -f {next,prev}

# TODO Check usage
# TODO Check functional
super + shift + !button{1-3}
    bspc pointer -t %i %i
# TODO Check usage
# TODO Check functional
# super + shift + @button{1-3}
#     bspc pointer -u

# TODO Check functional
super + {grave,Tab}
	bspc {node,desktop} -f last
	# bspc {window,desktop} -f last

# swap window with the last
# TODO Check functiona
super + apostrophe
	bspc window -s last

# Focus {h,j,k,l} window
# TODO Check functional
alt + {h,j,k,l}
  bspc window -f {left,down,up,right}

# Create a new window on the given spot
# TODO Check functional
alt + shift + {h,j,k,l}
    bspc window -p {left,down,up,right}

# moving around
# TODO Check functional
alt + y
   bspc window -w last.manual

# Move current window to the biggest spot
# TODO Change binding
alt + ctrl + f
    bspc window -s biggest
super + m
	bspc window -s biggest

# Move window to other monitor
# TODO Check functional
ctrl + shift + {h,l}
    bspc window -m {prev,next}
    # bspc monitor -f {prev,next}

# Move window to the {h,j,k,l} position
# TODO Check functional
alt + ctrl + {h,j,k,l}
    bspc window -s {left,down,up,right}

super + {_,shift + }{h,j,k,l}
	bspc window -{f,s} {left,down,up,right}

# wtf why the above definition doesnt work?
# Move window to the {h,j,k,l} position
alt + ctrl + l
    bspc window -s right

# TODO Check functional
alt + {_,shift + }c
   bspc window -f {next,prev}

# Move window back and forward
# focus the node for the given path jump
alt + {p,b,comma,period}
	bspc node -f @{parent,brother,first,second}

# TODO Check functional
# alt + {comma,period}
#    bspc desktop -C {backward,forward}


## 40h Orienation
### 40h Select
# Select Windows or Move
super + {_,shift + }c
	bspc node -f {next,prev}.local
	# bspc window -f {next,prev}

# TODO Check functional
# super + {comma,period}
# 	bspc desktop -C {backward,forward}

# Direction to Split
# super + ctrl + {h,j,k,l}
# 	bspc window -p {left,down,up,right}

# TODO Modernise
# super + ctrl + {_,shift + }space
# 	bspc {window -p cancel,desktop -c}

# Invert screen
# alt + i
# TODO Investigate `xcalib`
    # xcalib -i -a
